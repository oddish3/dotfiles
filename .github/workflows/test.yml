name: Test Dotfiles Installation

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@v3

    - name: Cache packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          /var/cache/apt/archives
        key: ${{ runner.os }}-packages-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-packages-

    - name: Set up test environment (Ubuntu)
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl wget python3 python3-pip zsh

    - name: Set up test environment (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        brew update
        brew install python3 zsh

    - name: Create .gitconfig.secret
      run: |
        echo "[user]" > ~/.gitconfig.secret
        echo "name = ${{ secrets.GIT_USER_NAME }}" >> ~/.gitconfig.secret
        echo "email = ${{ secrets.GIT_USER_EMAIL }}" >> ~/.gitconfig.secret

    - name: Configure Git to include .gitconfig.secret
      run: |
        echo "[include]" > ~/.gitconfig
        echo "path = ~/.gitconfig.secret" >> ~/.gitconfig

    - name: Install pynvim
      run: |
        python3 -m pip install --user --upgrade pynvim

    - name: Set up minimal neovim config
      run: |
        mkdir -p ~/.config/nvim
        cat << EOF > ~/.config/nvim/init.lua
        local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
        if not vim.loop.fs_stat(lazypath) then
          vim.fn.system({
            "git",
            "clone",
            "--filter=blob:none",
            "https://github.com/folke/lazy.nvim.git",
            "--branch=stable", -- latest stable release
            lazypath,
          })
        end
        vim.opt.rtp:prepend(lazypath)
        require("lazy").setup({
          -- your plugins here
        })
        EOF

    - name: debug neovim setup
      run: |
        echo "Neovim version:"
        ~/.local/bin/nvim --version
        echo "Python version:"
        python3 --version
        echo "Pynvim version:"
        python3 -c "import pynvim; print(pynvim.__version__)"
        echo "Neovim config files:"
        ls -R ~/.config/nvim
        echo "Neovim init.lua contents:"
        cat ~/.config/nvim/init.lua

    - name: Check Neovim installation
      run: |
          ~/.local/bin/nvim --headless -c 'checkhealth provider' -c 'q' || true
          ~/.local/bin/nvim --headless -c 'Lazy! update' -c 'q' || true
      if: always()

    - name: Install dotfiles
      run: |
        set -x  # Enable verbose output
        curl -fsSL https://oddish3.github.io/dotfiles/etc/install | bash
        echo "Exit status: $?"


    - name: Verify installation
      run: |
        set -ex
        [ -d "$HOME/.dotfiles" ]
        for dir in bin config etc git nvim python tmux vim zsh; do
          [ -d "$HOME/.dotfiles/$dir" ]
        done
        [ -f "$HOME/.dotfiles/install.py" ]
        for file in .bashrc .gitconfig .vimrc .zshrc; do
          [ -L "$HOME/$file" ]
        done
        echo "Current shell: $SHELL"
        echo "All checks passed successfully!"

    - name: Verify zsh is default shell
      run: |
        if [ "$SHELL" != "$(which zsh)" ]; then
          echo "ZSH is not the default shell"
          exit 1
        fi

    - name: Lint shell scripts
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get install -y shellcheck
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install shellcheck
        fi
        shellcheck **/*.sh

    - name: Lint Python files
      run: |
        pip3 install flake8
        flake8 .

    - name: Check Neovim installation
      run: |
        ~/.local/bin/nvim --version | head -n3
        ~/.local/bin/nvim --headless -c 'checkhealth provider' -c 'q' || true
        if [ $? -ne 0 ]; then
          echo "Neovim installation or health check failed"
          exit 1
        fi

    - name: Debug Neovim Python integration
      if: failure()
      run: |
        python3 -c "import neovim; print(neovim.__file__)"
        python3 -c "import pynvim; print(pynvim.__file__)"
        cat ~/.config/nvim/init.vim
        echo "NVIM_PYTHON_LOG_FILE contents:"
        cat $NVIM_PYTHON_LOG_FILE || echo "NVIM_PYTHON_LOG_FILE not found or empty"
